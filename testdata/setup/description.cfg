##############################################################
#                     Logging Properties                     #
##############################################################

# The type of stream to use for logging standard information.
# Standard information is any log entry, which provides basic
# information, warning, and error messages produced by the
# controller and its components.
# 
# If this property is not defined, the default value will be
# used.
#
# Valid values:
#     s - Use the "standard" output stream of the host
#         environment
#     [more options will follow in future] 
# Default value: s
# 
logging.standard =

# The type of stream to use for logging debug information.
# Debug information extends the standard information above by
# additional debug information produced by the controller and
# its components.
# 
# If this property is not defined, the default value will be
# used.
#
# Valid values:
#     s - Use the "standard" output stream of the host
#         environment
#     [more options will follow in future]
#
# Default value: s 
logging.debug = 


##############################################################
#                 Registration Properties                    #
##############################################################

# The type of protocol to use for listening for registrations
# of local elements to supervise by the controller. Any local
# element that needs to be supervised (monitored and
# controlled) by the controller must register itself at the
# controller via sending its model representation. The model
# receiver of the controller therefore provides a dedicated
# network connection, which uses the protocol defined by this
# property.
#
# If this property is not defined, the default value will be
# used.
#
# Valid values:
#     MQTT - Use the MQTT protocol; this creates an internal
#            MQTT client to subscribe to a dedicated
#            registration topic of an external broker
#     HTTP - Use the HTTP protocol; this creates an internal
#            HTTP server for receiving registrations via a
#            POST message of the local element to a dedicated
#            HTTP server context
#
# Default value: HTTP
registration.protocol =

# The URL to use for establishing the network connection for
# registration of local elements.
# The interpretation of this property's value depends on the
# defined 'registration.protocol':
#     If MQTT: the URL defines the external MQTT broker to
#              connect to
#     If HTTP: the URL defines the internal HTTP server to
#              create
#
# If this property is not defined, the default value will be
# used.
#
# Valid values: any URL valid in the context of the defined
#               protocol
#
# Default value: 127.0.0.1
registration.url =

# The port number to use for establishing the network
# connection for registration of local elements.
# The interpretation of this property's value depends on the
# defined 'registration.protocol':
#     If MQTT: the number defines the port of the external
#              MQTT broker to connect to
#     If HTTP: the number defines the port of the internal
#              HTTP server to create
#
# If this property is not defined, the default value will be
# used.
#
# Valid values: any port number valid in the context of the
#               defined protocol
#
# Default value: 80
registration.port =

# The channel name to use for establishing the network
# connection for registration of local elements.
# The interpretation of this property's value depends on the
# defined 'registration.protocol':
#     If MQTT: the name defines the registration topic of
#              the external MQTT broker to subscribe to
#     If HTTP: the name defines the context (URI path) of the
#              internal HTTP server to create; registration
#              POST messages of local elements must use this
#              path in combination with the 'registration.url',
#              e.g., http://127.0.0.1/registration
#
# If the protocol is HTTP, the channel name must start with
# "/" (see default value below).
#
# If this property is not defined, the default value will be
# used.
#
# Valid values: any string valid in the context of the defined
#               protocol
#
# Default value: /registration
registration.channel =


##############################################################
#                     Model Properties                       #
##############################################################

# The fully-qualified path to the directory in which the
# models (IVML files) of local elements will be saved. A local
# element's model has to be transmitted as part of its
# registration at the controller. Each received model is saved
# as an individual file in the directory defined by this
# property. Hence, if the directory denoted by the given path
# does not exist, it will be created automatically.
#
# If this property is not defined, the default value will be
# used.
#
# Valid values: any string denoting a valid, fully-qualified
#               path to a directory of the host system
#
# Default value: ./model
model.directory =
